name: NPM dist-tag Update

on:
  workflow_dispatch:
    inputs:
      packageVersion:
        description: "The version of the @itly packages to modify (2.1.0, 1.2.3, etc)"
        required: true
      removeTag:
        description: "dist-tag to remove (beta, latest, etc)"
        required: false
      addTag:
        description: "dist-tag to add (beta, latest, etc)"
        required: false

jobs:
  authorize:
    name: Authorize
    runs-on: ubuntu-latest
    steps:
      - name: ${{ github.actor }} permission check to do a release
        uses: octokit/request-action@v2.0.0
        id: permission_check
        with:
          route: GET /repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Auth Success"
        if: ${{ fromJson(steps.permission_check.outputs.data).permission == 'admin' }}
        run: echo "${{ github.actor }} is authorized."

      - name: "Auth Failed"
        if: ${{ failure() || fromJson(steps.permission_check.outputs.data).permission != 'admin' }}
        run: |
          echo "Unable to authorize ${{ github.actor }}. You must have admin permission to run this workflow."
          exit 1

  release:
    name: Dist-tag ${{ github.event.inputs.packageVersion }} -${{ github.event.inputs.removeTag }} +${{ github.event.inputs.addTag }}
    runs-on: ubuntu-latest
    needs: [authorize]
    env:
      RM_TAG: ${{ github.event.inputs.removeTag }}
      ADD_TAG: ${{ github.event.inputs.addTag }}
      PKG_VERSION: ${{ github.event.inputs.packageVersion }}
    strategy:
      matrix:
        node-version: ["12.x"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install
        run: yarn install --frozen-lockfile

      - name: Configure NPM User
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm whoami

      - name: Remove Tag '${{ env.RM_TAG }}'
        if: ${{ env.RM_TAG != '' }}
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npx ts-node tools/scripts/dist-tag-rm.ts ${{ env.RM_TAG }}

      - name: Add Tag '${{ github.event.inputs.addTag }}'
        if: ${{ (env.ADD_TAG != '') && (env.PKG_VERSION != '') }}
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npx ts-node tools/scripts/dist-tag-add.ts ${{ env.ADD_TAG }} ${{ env.PKG_VERSION }}
